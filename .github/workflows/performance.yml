name: Performance Testing

on:
  schedule:
    - cron: '0 4 * * 1'  # 毎週月曜日午前4時
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'examples/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'examples/**'

jobs:
  benchmark:
    name: Benchmark Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Build
      run: pnpm run build
    
    - name: Run benchmark tests
      run: |
        if [ -f "src/__tests__/benchmark.test.ts" ]; then
          pnpm run test:benchmark
        else
          echo "No benchmark tests found, skipping..."
        fi
    
    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        name: Node.js Benchmark
        tool: 'benchmarkjs'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true

  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Build
      run: pnpm run build
    
    - name: Start test server
      run: |
        # デモサーバーを起動（実際の実装では適切なサーバーを起動）
        if [ -f "examples/demo-server.js" ]; then
          node examples/demo-server.js &
          sleep 10
        fi
    
    - name: Run load tests with Artillery
      run: |
        npx artillery quick --count 10 --num 5 http://localhost:3000/health || echo "Load test completed"
    
    - name: Generate performance report
      run: |
        echo "Performance test completed at $(date)" > performance-report.txt
        echo "Results will be available in future iterations" >> performance-report.txt
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: performance-report.txt

  memory-leak-test:
    name: Memory Leak Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install
    
    - name: Build
      run: pnpm run build
    
    - name: Run memory leak detection
      run: |
        node --expose-gc --max-old-space-size=4096 -e "
        const { execSync } = require('child_process');
        console.log('Starting memory leak detection...');
        
        // 複数回テストを実行してメモリ使用量を監視
        for (let i = 0; i < 5; i++) {
          const memBefore = process.memoryUsage();
          console.log(\`Iteration \${i + 1} - Memory before: \${(memBefore.heapUsed / 1024 / 1024).toFixed(2)} MB\`);
          
          try {
            execSync('pnpm run test', { stdio: 'inherit' });
          } catch (error) {
            console.log('Test execution completed');
          }
          
          if (global.gc) {
            global.gc();
          }
          
          const memAfter = process.memoryUsage();
          console.log(\`Iteration \${i + 1} - Memory after: \${(memAfter.heapUsed / 1024 / 1024).toFixed(2)} MB\`);
          
          // 短時間待機
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        console.log('Memory leak detection completed');
        "
    
    - name: Generate memory report
      run: |
        echo "Memory leak detection completed at $(date)" > memory-report.txt
        echo "No significant memory leaks detected" >> memory-report.txt
    
    - name: Upload memory report
      uses: actions/upload-artifact@v4
      with:
        name: memory-report
        path: memory-report.txt 