name: Manual Publish to GitHub Package Registry

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., patch, minor, major, or specific version like 1.0.0)'
        required: true
        default: 'patch'

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js for GitHub Package Registry
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@gftdcojp'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Build package
        run: pnpm build

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Version bump
        id: version
        run: |
          if [[ "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            pnpm version ${{ github.event.inputs.version }} --no-git-tag-version
          else
            pnpm version ${{ github.event.inputs.version }} --no-git-tag-version
          fi
          echo "new_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add package.json
          git commit -m "ðŸš€ Release v${{ steps.version.outputs.new_version }}"
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin main --tags

      - name: Publish to GitHub Package Registry
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## Changes
            - Automated release from GitHub Actions
            
            ## Installation
            
            ### From GitHub Package Registry
            ```bash
            npm install @gftdcojp/gftd-orm@${{ steps.version.outputs.new_version }} --registry=https://npm.pkg.github.com
            ```
            
            ### Using .npmrc
            ```bash
            echo "@gftdcojp:registry=https://npm.pkg.github.com" >> .npmrc
            npm install @gftdcojp/gftd-orm@${{ steps.version.outputs.new_version }}
            ```
          draft: false
          prerelease: false

      - name: Create deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              description: `Package v${{ steps.version.outputs.new_version }} published successfully to GitHub Package Registry`,
              environment: 'github-packages'
            }); 