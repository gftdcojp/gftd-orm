name: Publish Pre-release

on:
  workflow_dispatch:
    inputs:
      prerelease_type:
        description: 'Pre-release type'
        required: true
        default: 'beta'
        type: choice
        options:
          - alpha
          - beta
          - rc
      registry:
        description: 'Registry to publish to'
        required: true
        default: 'npm'
        type: choice
        options:
          - npm
          - github
          - both

jobs:
  publish-prerelease:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.15.0

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Build package
        run: pnpm build

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Version bump for pre-release
        id: version
        run: |
          pnpm version prerelease --preid=${{ github.event.inputs.prerelease_type }} --no-git-tag-version
          echo "new_version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Commit version bump
        run: |
          git add package.json
          git commit -m "üöÄ Pre-release v${{ steps.version.outputs.new_version }}"
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin main --tags

      - name: Publish to npm
        if: github.event.inputs.registry == 'npm' || github.event.inputs.registry == 'both'
        run: pnpm publish --no-git-checks --tag ${{ github.event.inputs.prerelease_type }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Setup Node.js for GitHub Package Registry
        if: github.event.inputs.registry == 'github' || github.event.inputs.registry == 'both'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@gftdcojp'

      - name: Publish to GitHub Package Registry
        if: github.event.inputs.registry == 'github' || github.event.inputs.registry == 'both'
        run: pnpm publish --no-git-checks --tag ${{ github.event.inputs.prerelease_type }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Pre-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Pre-release v${{ steps.version.outputs.new_version }}
          body: |
            ## ‚ö†Ô∏è Pre-release Version
            This is a pre-release version for testing purposes.
            
            ## Installation
            
            ### From npm
            ```bash
            npm install @gftdcojp/gftd-orm@${{ github.event.inputs.prerelease_type }}
            ```
            
            ### From GitHub Package Registry
            ```bash
            npm install @gftdcojp/gftd-orm@${{ github.event.inputs.prerelease_type }} --registry=https://npm.pkg.github.com
            ```
            
            ## Changes
            - Pre-release build for testing new features
            - Version: v${{ steps.version.outputs.new_version }}
          draft: false
          prerelease: true

      - name: Create deployment status
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const registries = '${{ github.event.inputs.registry }}' === 'both' ? 'npm and GitHub Package Registry' : '${{ github.event.inputs.registry }}';
            
            await github.rest.repos.createDeploymentStatus({
              owner,
              repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              description: `Pre-release v${{ steps.version.outputs.new_version }} published to ${registries}`,
              environment: 'pre-release'
            }); 